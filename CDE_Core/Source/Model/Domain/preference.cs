using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GenAdxCDE.Source.Model.Domain
{
    /// <summary>
    /// @author Jason Canney
    /// Domain preference class 
    /// The preference class defines the domain object for consumer  preference data that will
    /// be received by the CDE from the mobile app and then stored in a data store
    /// by the CDE
    /// </summary>
    /// 

    [Serializable]
    public class preference
    {

        ///  @param serialVersionUID
        /// The serialVersionUID is a universal version identifier for a Serializable class. Deserialization uses this
        /// number to ensure that a loaded class corresponds exactly to a serialized object. If no match is found,
        /// then an InvalidClassException is thrown

        private const long serialVersionUID = 4349382150030819494L;

        /// <summary>
        /// Preference ID
        /// Unique identifier generated by the mobile app to identify the preference
        /// Not unique within the system and can be reused by the client
        /// The client will send any number of preferences and will sequence those 
        /// preferences with some unique numbering scheme</summary>
        private int preferenceId;

        /// <summary>
        /// The CDE utilizes the gs1.org spec for product categorization
        /// All values are compliant with the gs1 spec at date of implementation
        /// @param - preferenceGsSegment is the Segment value that the preference is part of
        /// </summary>
        private int preferenceGsSegment;

        /// <summary>
        /// @param preferenceCaTypeCode is a gs1 category classification code</summary>
        private int preferenceCaTypeCode;

        /// <summary>
        /// @param - preferenceCaValueCode is a gs1 category classification code</summary>
        private int preferenceCaValueCode;

        /// <summary>
        /// @param - product brand owner is the owner of the product.  ex. Ford or Target</summary>
        private string preferenceBrandOwner;

        /// <summary>
        /// @param - product description</summary>
        private string preferenceProductDesc;

        /// <summary>
        /// @param - preferenceDate is the date the preference was stored by the mobile app</summary>
        private string preferenceDate;

        /// <summary>
        /// @param - consumerID is a value sent from the mobile app with preferences
        /// that link the preference back to a particular consumer.
        /// Once stored in a data store, these values will link to the consumerID sent in the
        /// consumer object</summary>
        private int consumerId;


        /// <summary>
        ///  Default Constructor
        ///  @param preference object
        /// </summary>
        public preference()
        {

        }

        /// <summary>
        /// Overloaded Constructor</summary>
        /// <param name="preferenceId"> </param>
        /// <param name="preferenceGsSegment"> </param>
        /// <param name="preferenceCaTypeCode"> </param>
        /// <param name="preferenceCaValueCode"></param>
        /// <param name="prferenceBrandOwner"></param>
        /// <param name="preferenceProductDesc"></param>
        /// <param name="preferenceDate"></param>
        /// <param name="consumerId"></param>

        public preference(int preferenceId, int preferenceGsSegment, int preferenceCaTypeCode, int preferenceCaValueCode, string preferenceBrandOwner, string preferenceProductDesc, string preferenceDate, int consumerId) : base()
        {
            this.preferenceId = preferenceId;
            this.preferenceGsSegment = preferenceGsSegment;
            this.preferenceCaTypeCode = preferenceCaTypeCode;
            this.preferenceCaValueCode = preferenceCaValueCode;
            this.preferenceBrandOwner = preferenceBrandOwner;
            this.preferenceProductDesc = preferenceProductDesc;
            this.preferenceDate = preferenceDate;
            this.consumerId = consumerId;
        }

        // getters and setters

        /// <returns> Returns the preference ID </returns>
        /// <sets>Sets the preference ID </sets>

        public virtual int PreferenceId
        {
            get
            {
                return preferenceId;
            }
            set
            {
                this.preferenceId = value;
            }
        }



        /// <returns> Returns the preference GS Segment code </returns>
        /// <sets>Sets the preference GS Segment code</sets>

        public virtual int PreferenceGsSegment
        {
            get
            {
                return preferenceGsSegment;
            }
            set
            {
                this.preferenceGsSegment = value;
            }
        }

        /// <returns> Returns the preferenceCaTypeCode </returns>
        /// <sets>Sets the preferenceCaTypeCode</sets>

        public virtual int PreferenceCaTypeCode
        {
            get
            {
                return preferenceCaTypeCode;
            }
            set
            {
                this.preferenceCaTypeCode = value;
            }
        }

        /// <returns> Returns the preferenceCaValueCode </returns>
        /// <sets>Sets the preferenceCaValueCode</sets>

        public virtual int PreferenceCaValueCode
        {
            get
            {
                return preferenceCaValueCode;
            }
            set
            {
                this.preferenceCaValueCode = value;
            }
        }

        /// <returns> Returns the preferenceBrandOwner </returns>
        /// <sets>Sets the preferenceBrandOwner</sets>

        public virtual string PreferenceBrandOwner
        {
            get
            {
                return preferenceBrandOwner;
            }
            set
            {
                this.preferenceBrandOwner = value;
            }
        }

        /// <returns> Returns the preferenceProductDesc </returns>
        /// <sets>Sets the preferenceProductDesc</sets>

        public virtual string PreferenceProductDesc
        {
            get
            {
                return preferenceProductDesc;
            }
            set
            {
                this.preferenceProductDesc = value;
            }
        }

        /// <returns> Returns the preferenceDate </returns>
        /// <sets>Sets the preferenceDate</sets>

        public virtual string PreferenceDate
        {
            get
            {
                return preferenceDate;
            }
            set
            {
                this.preferenceDate = value;
            }
        }

        /// <returns> Returns the consumerId </returns>
        /// <sets>Sets the consumerId</sets>

        public virtual int ConsumerId
        {
            get
            {
                return consumerId;
            }
            set
            {
                this.consumerId = value;
            }
        }

        /// <summary>
        /// Validate if the instance variables are valid
        /// </summary>
        /// <returns> boolean - true if instance variables are valid, else false </returns>
        public virtual bool validate()
        {

            if (int.ReferenceEquals(preferenceId, null))
            {
                return false;
            }
            if (string.ReferenceEquals(preferenceGsSegment, null))
            {
                return false;
            }
            if (string.ReferenceEquals(preferenceCaTypeCode, null))
            {
                return false;
            }
            if (string.ReferenceEquals(preferenceCaValueCode, null))
            {
                return false;
            }
            if (string.ReferenceEquals(preferenceBrandOwner, null))
            {
                return false;
            }
            if (string.ReferenceEquals(preferenceProductDesc, null))
            {
                return false;
            }

            if (string.ReferenceEquals(preferenceDate, null))
            {
                return false;
            }
            if (int.ReferenceEquals(consumerId, null))
            {
                return false;
            }
            
            return true;
        }

        /// <summary>Equals Test Method</summary>
        /// <param name="preferenceId">; </param>
        /// <param name="preferenceGsSegment">; </param>
        /// <param name="preferenceCaTypeCode">; </param>
        /// <param name="preferenceCaValueCode"></param>
        /// <param name="preferenceBrandOwner"></param>
        /// <param name="preferenceProductDesc"></param>
        /// <param name="preferenceDate"></param>
        /// <param name="consumerId"></param>


        public virtual bool Equals(preference preference)
        {
            if (!preferenceId.Equals(preference.preferenceId))
            {
                return false;
            }
            if (!preferenceGsSegment.Equals(preference.preferenceGsSegment))
            {
                return false;
            }
            if (!preferenceCaTypeCode.Equals(preference.preferenceCaTypeCode))
            {
                return false;
            }

            if (!preferenceCaValueCode.Equals(preference.preferenceCaValueCode))
            {
                return false;
            }
            if (!preferenceBrandOwner.Equals(preference.preferenceBrandOwner))
            {
                return false;
            }
            if (!preferenceProductDesc.Equals(preference.preferenceProductDesc))
            {
                return false;
            }

            if (!preferenceDate.Equals(preference.preferenceDate))
            {
                return false;
            }
            if (!consumerId.Equals(preference.consumerId))
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// Constructs a <code>STring</code> with all attributes
        /// in name = value format
        /// 
        /// @return a <code>String</code> representation
        /// of this object
        /// 
        /// </summary>

        public override string ToString()
        {
            StringBuilder strBfr = new StringBuilder();
            strBfr.Append("preferenceId:");
            strBfr.Append(preferenceId);
            strBfr.Append("\ncpreferenceGsSegment:");
            strBfr.Append(preferenceGsSegment);
            strBfr.Append("\npreferenceCaTypeCode:");
            strBfr.Append(preferenceCaTypeCode);
            strBfr.Append("\npreferenceCaValueCode:");
            strBfr.Append(preferenceCaValueCode);
            strBfr.Append("\npreferenceBrandOwner:");
            strBfr.Append(preferenceBrandOwner);
            strBfr.Append("\ncpreferenceProductDesc:");
            strBfr.Append(preferenceProductDesc);
            strBfr.Append("\npreferenceDate:");
            strBfr.Append(preferenceDate);
            strBfr.Append("\nconsumerId:");
            strBfr.Append(consumerId);

            return strBfr.ToString();
        }

    }
}
